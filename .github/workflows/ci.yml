name: CI Pipeline

on:
  pull_request:
    branches: [develop]
    types: [opened, edited, reopened, synchronize, review_requested]
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install --no-cache-dir -r requirements.txt

      - name: Run tests
        run: python -m pytest --junitxml=report.xml

  analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Count lines of code with Cloc
        run: |
          sudo apt-get update
          sudo apt-get install -y cloc
          cloc src/ > cloc-report.txt
          cat cloc-report.txt

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: '-Dsonar.projectKey=iprachuk_MyProject -Dsonar.sources=src -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=iprachuk -Dsonar.login=${{ secrets.SONAR_TOKEN }}'
      - name: Run flake8 with Reviewdog
        uses: reviewdog/action-flake8@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: error

      - name: Run Black with Reviewdog
        uses: reviewdog/action-black@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: info

  review-check:
    if: github.event.pull_request.base.ref == 'develop'
    runs-on: ubuntu-latest
    steps:
      - name: Check for approved code review
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const approved = reviews.some(review => review.state === 'APPROVED');
            if (!approved) {
              core.setFailed("Код-рев’ю не схвалено");
            }
